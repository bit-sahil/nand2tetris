// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    DMux(in=load , sel=address[14] , a=ramIn , b=nonRamIn);
    DMux(in=nonRamIn , sel=address[13] , a=screenIn , b=invalid );
	RAM16K(in=in , load=ramIn , address=address[0..13] , out=ramOut );
    Screen(in=in , load=screenIn , address=address[0..12] , out=scrOut );
    Keyboard(out=kbrOut );
    Or8Way(in=address[0..7] , out=lowOr );
    Or8Way(in=address[5..12] , out=highOr );
    Or(a=lowOr , b=highOr , out=nonEmptyFirst13Bits );
    Mux16(a=kbrOut , b=false , sel=nonEmptyFirst13Bits , out=krbOrInvalidOut );
    Mux16(a=scrOut , b=krbOrInvalidOut , sel=address[13] , out=nonRamOut );
    Mux16(a=ramOut , b=nonRamOut , sel=address[14] , out=out );
}