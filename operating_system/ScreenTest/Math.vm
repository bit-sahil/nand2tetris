function Math.init 2
	push constant 16
	pop static 0  // n
	push constant 16
	call Memory.alloc 1
	pop static 1  // powersOfTwo
	push constant 0
	pop local 0  // i
	push constant 1
	pop local 1  // pow
label LOOP0
	push local 0  // i
	push constant 16
	lt
	not
	if-goto ENDLOOP0
	push static 1  // powersOfTwo
	push local 0  // i
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push local 1  // pow
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push local 0  // i
	push constant 1
	add
	pop local 0  // i
	push local 1  // pow
	push local 1  // pow
	add
	pop local 1  // pow
	goto LOOP0
label ENDLOOP0
	push constant 0
	return
function Math.multiply 3
	push argument 0  // x
	push constant 0
	eq
	push argument 1  // y
	push constant 0
	eq
	or
	not
	if-goto ELSE1
	push constant 0
	return
	goto ELSE_END1
label ELSE1
label ELSE_END1
	push constant 0
	pop local 1  // i
	push constant 0
	pop local 0  // result
	push argument 0  // x
	pop local 2  // runningX
label LOOP2
	push local 1  // i
	push constant 16
	lt
	not
	if-goto ENDLOOP2
	push static 1  // powersOfTwo
	push local 1  // i
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	push argument 1  // y
	and
	push constant 0
	eq
	not
	not
	if-goto ELSE3
	push local 0  // result
	push local 2  // runningX
	add
	pop local 0  // result
	goto ELSE_END3
label ELSE3
label ELSE_END3
	push local 1  // i
	push constant 1
	add
	pop local 1  // i
	push local 2  // runningX
	push local 2  // runningX
	add
	pop local 2  // runningX
	goto LOOP2
label ENDLOOP2
	push local 0  // result
	return
function Math.divide 1
	push argument 1  // y
	push constant 0
	eq
	not
	if-goto ELSE4
	push constant 3
	call Sys.error 1
	return
	goto ELSE_END4
label ELSE4
label ELSE_END4
	push argument 0  // x
	push constant 0
	eq
	not
	if-goto ELSE5
	push constant 0
	return
	goto ELSE_END5
label ELSE5
label ELSE_END5
	push argument 1  // y
	push constant 1
	eq
	not
	if-goto ELSE6
	push argument 0  // x
	return
	goto ELSE_END6
label ELSE6
label ELSE_END6
	push argument 1  // y
	push constant 1
	neg
	eq
	not
	if-goto ELSE7
	push argument 0  // x
	neg
	return
	goto ELSE_END7
label ELSE7
label ELSE_END7
	push argument 0  // x
	push constant 32767
	neg
	push constant 1
	sub
	eq
	not
	if-goto ELSE8
	push argument 1  // y
	push constant 32767
	neg
	push constant 1
	sub
	eq
	not
	if-goto ELSE9
	push constant 1
	return
	goto ELSE_END9
label ELSE9
label ELSE_END9
	push argument 1  // y
	push constant 0
	gt
	not
	if-goto ELSE10
	push argument 0  // x
	push argument 1  // y
	add
	pop argument 0  // x
	push argument 0  // x
	push argument 1  // y
	call Math.divide 2
	push constant 1
	sub
	return
	goto ELSE_END10
label ELSE10
	push argument 0  // x
	push argument 1  // y
	sub
	pop argument 0  // x
	push argument 0  // x
	push argument 1  // y
	call Math.divide 2
	push constant 1
	add
	return
label ELSE_END10
	goto ELSE_END8
label ELSE8
	push argument 1  // y
	push constant 32767
	neg
	push constant 1
	sub
	eq
	not
	if-goto ELSE11
	push constant 0
	return
	goto ELSE_END11
label ELSE11
label ELSE_END11
label ELSE_END8
	push constant 0  // false
	pop local 0  // sign
	push argument 0  // x
	push constant 0
	lt
	not
	if-goto ELSE12
	push local 0  // sign
	not
	pop local 0  // sign
	push argument 0  // x
	neg
	pop argument 0  // x
	goto ELSE_END12
label ELSE12
label ELSE_END12
	push argument 1  // y
	push constant 0
	lt
	not
	if-goto ELSE13
	push local 0  // sign
	not
	pop local 0  // sign
	push argument 1  // y
	neg
	pop argument 1  // y
	goto ELSE_END13
label ELSE13
label ELSE_END13
	push argument 1  // y
	push argument 0  // x
	gt
	not
	if-goto ELSE14
	push constant 0
	return
	goto ELSE_END14
label ELSE14
label ELSE_END14
	push argument 0  // x
	push argument 1  // y
	eq
	not
	if-goto ELSE15
	push local 0  // sign
	not
	if-goto ELSE16
	push constant 1
	neg
	return
	goto ELSE_END16
label ELSE16
	push constant 1
	return
label ELSE_END16
	goto ELSE_END15
label ELSE15
label ELSE_END15
	push constant 0
	pop static 2  // qy2
	push local 0  // sign
	not
	if-goto ELSE17
	push argument 0  // x
	push argument 1  // y
	call Math.divide_seq 2
	neg
	return
	goto ELSE_END17
label ELSE17
	push argument 0  // x
	push argument 1  // y
	call Math.divide_seq 2
	return
label ELSE_END17
function Math.divide_seq 5
	push constant 16
	call Array.new 1
	pop local 0  // mem
	push argument 1  // y
	pop local 2  // y_pow
	push local 0  // mem
	push constant 1
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push local 2  // y_pow
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push constant 2
	pop local 1  // i
	push constant 0  // true
	not  // true
	pop local 4  // loopCond
label LOOP18
	push local 1  // i
	push constant 16
	lt
	push local 4  // loopCond
	and
	push argument 0  // x
	push local 2  // y_pow
	gt
	push argument 0  // x
	push local 2  // y_pow
	eq
	or
	and
	not
	if-goto ENDLOOP18
	push local 2  // y_pow
	push local 2  // y_pow
	add
	pop local 2  // y_pow
	push local 2  // y_pow
	push constant 0
	lt
	not
	if-goto ELSE19
	push constant 0  // false
	pop local 4  // loopCond
	goto ELSE_END19
label ELSE19
	push local 0  // mem
	push local 1  // i
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push local 2  // y_pow
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push local 1  // i
	push constant 1
	add
	pop local 1  // i
label ELSE_END19
	goto LOOP18
label ENDLOOP18
	push constant 0
	pop local 3  // dividend
label LOOP20
	push local 1  // i
	push constant 1
	gt
	not
	if-goto ENDLOOP20
	push local 1  // i
	push constant 1
	sub
	pop local 1  // i
	push local 3  // dividend
	push local 3  // dividend
	add
	pop local 3  // dividend
	push argument 0  // x
	push local 0  // mem
	push local 1  // i
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	gt
	push argument 0  // x
	push local 0  // mem
	push local 1  // i
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	eq
	or
	not
	if-goto ELSE21
	push local 3  // dividend
	push constant 1
	add
	pop local 3  // dividend
	push argument 0  // x
	push local 0  // mem
	push local 1  // i
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	sub
	pop argument 0  // x
	goto ELSE_END21
label ELSE21
label ELSE_END21
	goto LOOP20
label ENDLOOP20
	push local 0  // mem
	call Array.dispose 1
	pop temp 0
	push local 3  // dividend
	return
function Math.divide_qy2 2
	push argument 1  // y
	push constant 0
	lt
	not
	if-goto ELSE22
	push constant 0
	return
	goto ELSE_END22
label ELSE22
label ELSE_END22
	push argument 1  // y
	push argument 0  // x
	gt
	not
	if-goto ELSE23
	push constant 0
	return
	goto ELSE_END23
label ELSE23
label ELSE_END23
	push argument 1  // y
	push argument 1  // y
	add
	pop local 1  // double_y
	push argument 0  // x
	push local 1  // double_y
	call Math.divide_qy2 2
	pop local 0  // q
	push argument 0  // x
	push static 2  // qy2
	sub
	push argument 1  // y
	lt
	not
	if-goto ELSE24
	push local 0  // q
	push local 0  // q
	add
	return
	goto ELSE_END24
label ELSE24
	push static 2  // qy2
	push argument 1  // y
	add
	pop static 2  // qy2
	push constant 1
	push local 0  // q
	add
	push local 0  // q
	add
	return
label ELSE_END24
function Math.sqrt 4
	push argument 0  // x
	push constant 0
	lt
	not
	if-goto ELSE25
	push constant 4
	call Sys.error 1
	return
	goto ELSE_END25
label ELSE25
label ELSE_END25
	push argument 0  // x
	push constant 0
	eq
	push argument 0  // x
	push constant 1
	eq
	or
	not
	if-goto ELSE26
	push argument 0  // x
	return
	goto ELSE_END26
label ELSE26
label ELSE_END26
	push constant 0
	pop local 1  // y
	push constant 7
	pop local 0  // i
label LOOP27
	push local 0  // i
	push constant 1
	neg
	gt
	not
	if-goto ENDLOOP27
	push local 1  // y
	push static 1  // powersOfTwo
	push local 0  // i
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	add
	pop local 2  // guess
	push local 2  // guess
	push local 2  // guess
	call Math.multiply 2
	pop local 3  // guess_sq
	push local 3  // guess_sq
	push argument 0  // x
	eq
	not
	if-goto ELSE28
	push local 2  // guess
	return
	goto ELSE_END28
label ELSE28
label ELSE_END28
	push local 3  // guess_sq
	push constant 0
	gt
	not
	if-goto ELSE29
	push local 3  // guess_sq
	push argument 0  // x
	lt
	not
	if-goto ELSE30
	push local 2  // guess
	pop local 1  // y
	goto ELSE_END30
label ELSE30
label ELSE_END30
	goto ELSE_END29
label ELSE29
label ELSE_END29
	push local 0  // i
	push constant 1
	sub
	pop local 0  // i
	goto LOOP27
label ENDLOOP27
	push local 1  // y
	return
function Math.max 0
	push argument 0  // a
	push argument 1  // b
	gt
	not
	if-goto ELSE31
	push argument 0  // a
	return
	goto ELSE_END31
label ELSE31
	push argument 1  // b
	return
label ELSE_END31
function Math.min 0
	push argument 0  // a
	push argument 1  // b
	lt
	not
	if-goto ELSE32
	push argument 0  // a
	return
	goto ELSE_END32
label ELSE32
	push argument 1  // b
	return
label ELSE_END32
function Math.abs 0
	push argument 0  // x
	push constant 0
	gt
	not
	if-goto ELSE33
	push argument 0  // x
	return
	goto ELSE_END33
label ELSE33
	push argument 0  // x
	neg
	return
label ELSE_END33
