function Bitmask.init 2
	push constant 16
	call Memory.alloc 1
	pop static 0  // bitmap
	push constant 0
	pop local 0  // i
	push constant 1
	pop local 1  // curr_mask
label LOOP0
	push local 0  // i
	push constant 16
	lt
	not
	if-goto ENDLOOP0
	push static 0  // bitmap
	push local 0  // i
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push local 1  // curr_mask
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push local 0  // i
	push constant 1
	add
	pop local 0  // i
	push local 1  // curr_mask
	push local 1  // curr_mask
	add
	pop local 1  // curr_mask
	goto LOOP0
label ENDLOOP0
	push constant 0
	return
function Bitmask.idxMask 0
	push static 0  // bitmap
	push argument 0  // k
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	return
function Bitmask.getMask 0
	push argument 0  // x
	push constant 16
	call Bitmask.modulo 2
	call Bitmask.modulo 2
	return
function Bitmask.modulo 1
	push argument 0  // x
	push argument 1  // p
	call Math.divide 2
	pop local 0  // div
	push argument 0  // x
	push argument 1  // p
	push local 0  // div
	call Math.multiply 2
	sub
	return
