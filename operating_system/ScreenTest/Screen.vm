function Screen.init 0
	push constant 16384
	pop static 1  // SCREEN
	push constant 512
	pop static 2  // ROWS
	push constant 256
	pop static 3  // COLUMNS
	push constant 16
	pop static 4  // BYTE_SIZE
	push static 2  // ROWS
	push static 4  // BYTE_SIZE
	call Math.divide 2
	pop static 5  // BYTES_IN_ROW
	call Bitmask.init 0
	pop temp 0
	push constant 0  // true
	not  // true
	pop static 0  // color
	push constant 0
	return
function Screen.clearScreen 0
	push constant 0  // false
	pop static 0  // color
	push constant 0
	push constant 0
	push static 2  // ROWS
	push constant 1
	sub
	push static 3  // COLUMNS
	push constant 1
	sub
	call Screen.drawRectangle 4
	pop temp 0
	push constant 0
	return
function Screen.setColor 0
	push argument 0  // b
	pop static 0  // color
	push constant 0
	return
function Screen.drawPixel 3
	push static 1  // SCREEN
	push argument 1  // y
	push static 5  // BYTES_IN_ROW
	call Math.multiply 2
	add
	push argument 0  // x
	push static 4  // BYTE_SIZE
	call Math.divide 2
	add
	pop local 0  // w
	push argument 0  // x
	call Bitmask.getMask 1
	pop local 2  // mask
	push static 0  // color
	not
	if-goto ELSE0
	push local 0  // w
	call Memory.peek 1
	push local 2  // mask
	or
	pop local 1  // value
	goto ELSE_END0
label ELSE0
	push local 0  // w
	call Memory.peek 1
	push local 2  // mask
	not
	and
	pop local 1  // value
label ELSE_END0
	push local 0  // w
	push local 1  // value
	call Memory.poke 2
	pop temp 0
	push constant 0
	return
function Screen.drawLine 11
	push argument 2  // x2
	push argument 0  // x1
	sub
	pop local 5  // dx
	push argument 3  // y2
	push argument 1  // y1
	sub
	pop local 6  // dy
	push local 6  // dy
	push constant 0
	eq
	not
	if-goto ELSE1
	push local 5  // dx
	push constant 0
	lt
	not
	if-goto ELSE2
	push local 5  // dx
	neg
	pop local 5  // dx
	push argument 2  // x2
	pop argument 0  // x1
	goto ELSE_END2
label ELSE2
label ELSE_END2
	push local 5  // dx
	push constant 1
	add
	pop local 5  // dx
	push static 1  // SCREEN
	push argument 1  // y1
	push static 5  // BYTES_IN_ROW
	call Math.multiply 2
	add
	push argument 0  // x1
	push constant 16
	call Math.divide 2
	add
	pop local 8  // w
	push argument 0  // x1
	push constant 16
	call Bitmask.modulo 2
	pop local 2  // a
	push constant 16
	push local 2  // a
	sub
	pop local 3  // b
	push local 2  // a
	push constant 0
	gt
	not
	if-goto ELSE3
	push local 5  // dx
	push local 3  // b
	gt
	not
	if-goto ELSE4
	push static 0  // color
	not
	if-goto ELSE5
	push local 8  // w
	call Memory.peek 1
	push local 2  // a
	call Bitmask.idxMask 1
	push constant 1
	sub
	not
	or
	pop local 10  // value
	goto ELSE_END5
label ELSE5
	push local 8  // w
	call Memory.peek 1
	push local 2  // a
	call Bitmask.idxMask 1
	push constant 1
	sub
	and
	pop local 10  // value
label ELSE_END5
	push local 8  // w
	push local 10  // value
	call Memory.poke 2
	pop temp 0
	push local 5  // dx
	push local 3  // b
	sub
	pop local 5  // dx
	push local 8  // w
	push constant 1
	add
	pop local 8  // w
	goto ELSE_END4
label ELSE4
	push static 0  // color
	not
	if-goto ELSE6
	push local 8  // w
	call Memory.peek 1
	push local 2  // a
	call Bitmask.idxMask 1
	push constant 1
	sub
	not
	or
	pop local 10  // value
	push local 10  // value
	push constant 16
	push local 3  // b
	push local 5  // dx
	sub
	sub
	call Bitmask.idxMask 1
	push constant 1
	sub
	and
	pop local 10  // value
	goto ELSE_END6
label ELSE6
	push local 8  // w
	call Memory.peek 1
	push local 2  // a
	call Bitmask.idxMask 1
	push constant 1
	sub
	and
	pop local 10  // value
	push local 10  // value
	push constant 16
	push local 3  // b
	push local 5  // dx
	sub
	sub
	call Bitmask.idxMask 1
	push constant 1
	sub
	not
	or
	pop local 10  // value
label ELSE_END6
	push local 8  // w
	push local 10  // value
	call Memory.poke 2
	pop temp 0
	push constant 0
	return
label ELSE_END4
	goto ELSE_END3
label ELSE3
label ELSE_END3
	push static 0  // color
	not
	if-goto ELSE7
	push constant 1
	neg
	pop local 10  // value
	goto ELSE_END7
label ELSE7
	push constant 0
	pop local 10  // value
label ELSE_END7
label LOOP8
	push local 5  // dx
	push constant 15
	gt
	not
	if-goto ENDLOOP8
	push local 8  // w
	push local 10  // value
	call Memory.poke 2
	pop temp 0
	push local 5  // dx
	push constant 16
	sub
	pop local 5  // dx
	push local 8  // w
	push constant 1
	add
	pop local 8  // w
	goto LOOP8
label ENDLOOP8
	push local 5  // dx
	push constant 0
	gt
	not
	if-goto ELSE9
	push static 0  // color
	not
	if-goto ELSE10
	push local 8  // w
	call Memory.peek 1
	push local 5  // dx
	call Bitmask.idxMask 1
	push constant 1
	sub
	or
	pop local 10  // value
	goto ELSE_END10
label ELSE10
	push local 8  // w
	call Memory.peek 1
	push local 5  // dx
	call Bitmask.idxMask 1
	push constant 1
	sub
	not
	and
	pop local 10  // value
label ELSE_END10
	push local 8  // w
	push local 10  // value
	call Memory.poke 2
	pop temp 0
	goto ELSE_END9
label ELSE9
label ELSE_END9
	push constant 0
	return
	goto ELSE_END1
label ELSE1
label ELSE_END1
	push local 5  // dx
	push constant 0
	eq
	not
	if-goto ELSE11
	push local 6  // dy
	push constant 0
	lt
	not
	if-goto ELSE12
	push local 6  // dy
	neg
	pop local 6  // dy
	push argument 3  // y2
	pop argument 1  // y1
	goto ELSE_END12
label ELSE12
label ELSE_END12
	push local 6  // dy
	push constant 1
	add
	pop local 6  // dy
	push static 1  // SCREEN
	push argument 1  // y1
	push static 5  // BYTES_IN_ROW
	call Math.multiply 2
	add
	push argument 0  // x1
	push constant 16
	call Math.divide 2
	add
	pop local 8  // w
	push argument 0  // x1
	call Bitmask.getMask 1
	pop local 9  // mask
label LOOP13
	push local 6  // dy
	push constant 0
	gt
	not
	if-goto ENDLOOP13
	push static 0  // color
	not
	if-goto ELSE14
	push local 8  // w
	call Memory.peek 1
	push local 9  // mask
	or
	pop local 10  // value
	goto ELSE_END14
label ELSE14
	push local 8  // w
	call Memory.peek 1
	push local 9  // mask
	not
	and
	pop local 10  // value
label ELSE_END14
	push local 8  // w
	push local 10  // value
	call Memory.poke 2
	pop temp 0
	push local 6  // dy
	push constant 1
	sub
	pop local 6  // dy
	push local 8  // w
	push static 5  // BYTES_IN_ROW
	add
	pop local 8  // w
	goto LOOP13
label ENDLOOP13
	push constant 0
	return
	goto ELSE_END11
label ELSE11
label ELSE_END11
	push constant 0
	pop local 2  // a
	push constant 0
	pop local 3  // b
	push local 5  // dx
	push constant 0
	gt
	push local 6  // dy
	push constant 0
	gt
	and
	not
	if-goto ELSE15
	push constant 0  // true
	not  // true
	pop local 7  // case_type
	push argument 0  // x1
	pop local 0  // x
	push argument 1  // y1
	pop local 1  // y
	goto ELSE_END15
label ELSE15
label ELSE_END15
	push local 5  // dx
	push constant 0
	lt
	push local 6  // dy
	push constant 0
	lt
	and
	not
	if-goto ELSE16
	push constant 0  // true
	not  // true
	pop local 7  // case_type
	push argument 2  // x2
	pop local 0  // x
	push argument 3  // y2
	pop local 1  // y
	push local 5  // dx
	neg
	pop local 5  // dx
	push local 6  // dy
	neg
	pop local 6  // dy
	goto ELSE_END16
label ELSE16
label ELSE_END16
	push local 7  // case_type
	not
	if-goto ELSE17
	push constant 0
	pop local 4  // diff
label LOOP18
	push local 2  // a
	push local 5  // dx
	lt
	push local 3  // b
	push local 6  // dy
	lt
	and
	not
	if-goto ENDLOOP18
	push local 0  // x
	push local 2  // a
	add
	push local 1  // y
	push local 3  // b
	add
	call Screen.drawPixel 2
	pop temp 0
	push local 3  // b
	push local 6  // dy
	lt
	push local 4  // diff
	push constant 0
	lt
	and
	not
	if-goto ELSE19
	push local 3  // b
	push constant 1
	add
	pop local 3  // b
	push local 4  // diff
	push local 5  // dx
	add
	pop local 4  // diff
	goto ELSE_END19
label ELSE19
	push local 2  // a
	push constant 1
	add
	pop local 2  // a
	push local 4  // diff
	push local 6  // dy
	sub
	pop local 4  // diff
label ELSE_END19
	goto LOOP18
label ENDLOOP18
	push local 0  // x
	push local 2  // a
	add
	push local 1  // y
	push local 3  // b
	add
	call Screen.drawPixel 2
	pop temp 0
	goto ELSE_END17
label ELSE17
	push local 5  // dx
	push constant 0
	lt
	not
	if-goto ELSE20
	push argument 2  // x2
	pop local 0  // x
	push argument 3  // y2
	pop local 1  // y
	push local 5  // dx
	neg
	pop local 5  // dx
	goto ELSE_END20
label ELSE20
	push argument 0  // x1
	pop local 0  // x
	push argument 1  // y1
	pop local 1  // y
	push local 6  // dy
	neg
	pop local 6  // dy
label ELSE_END20
	push constant 0
	pop local 4  // diff
label LOOP21
	push local 2  // a
	push local 5  // dx
	lt
	push local 3  // b
	push local 6  // dy
	lt
	and
	not
	if-goto ENDLOOP21
	push local 0  // x
	push local 2  // a
	add
	push local 1  // y
	push local 3  // b
	sub
	call Screen.drawPixel 2
	pop temp 0
	push local 3  // b
	push local 6  // dy
	lt
	push local 4  // diff
	push constant 0
	lt
	and
	not
	if-goto ELSE22
	push local 2  // a
	push constant 1
	add
	pop local 2  // a
	push local 4  // diff
	push local 6  // dy
	add
	pop local 4  // diff
	goto ELSE_END22
label ELSE22
	push local 3  // b
	push constant 1
	add
	pop local 3  // b
	push local 4  // diff
	push local 5  // dx
	sub
	pop local 4  // diff
label ELSE_END22
	goto LOOP21
label ENDLOOP21
	push local 0  // x
	push local 2  // a
	add
	push local 1  // y
	push local 3  // b
	sub
	call Screen.drawPixel 2
	pop temp 0
label ELSE_END17
	push constant 0
	return
function Screen.drawRectangle 3
	push constant 0
	pop local 2  // b
	push argument 1  // y1
	push argument 3  // y2
	gt
	not
	if-goto ELSE23
	push argument 3  // y2
	pop local 0  // y
	push argument 1  // y1
	push argument 3  // y2
	sub
	pop local 1  // dy
	goto ELSE_END23
label ELSE23
	push argument 1  // y1
	pop local 0  // y
	push argument 3  // y2
	push argument 1  // y1
	sub
	pop local 1  // dy
label ELSE_END23
label LOOP24
	push local 2  // b
	push local 1  // dy
	lt
	not
	if-goto ENDLOOP24
	push argument 0  // x1
	push local 0  // y
	push local 2  // b
	add
	push argument 2  // x2
	push local 0  // y
	push local 2  // b
	add
	call Screen.drawLine 4
	pop temp 0
	push local 2  // b
	push constant 1
	add
	pop local 2  // b
	goto LOOP24
label ENDLOOP24
	push argument 0  // x1
	push local 0  // y
	push local 2  // b
	add
	push argument 2  // x2
	push local 0  // y
	push local 2  // b
	add
	call Screen.drawLine 4
	pop temp 0
	push constant 0
	return
function Screen.drawCircle 2
	push argument 2  // r
	pop local 1  // b
label LOOP25
	push local 1  // b
	push constant 0
	gt
	not
	if-goto ENDLOOP25
	push argument 2  // r
	push argument 2  // r
	call Math.multiply 2
	push local 1  // b
	push local 1  // b
	call Math.multiply 2
	sub
	call Math.sqrt 1
	pop local 0  // a
	push argument 0  // x
	push local 0  // a
	sub
	push argument 1  // y
	push local 1  // b
	add
	push argument 0  // x
	push local 0  // a
	add
	push argument 1  // y
	push local 1  // b
	add
	call Screen.drawLine 4
	pop temp 0
	push argument 0  // x
	push local 0  // a
	sub
	push argument 1  // y
	push local 1  // b
	sub
	push argument 0  // x
	push local 0  // a
	add
	push argument 1  // y
	push local 1  // b
	sub
	call Screen.drawLine 4
	pop temp 0
	push local 1  // b
	push constant 1
	sub
	pop local 1  // b
	goto LOOP25
label ENDLOOP25
	push argument 0  // x
	push argument 2  // r
	sub
	push argument 1  // y
	push argument 0  // x
	push argument 2  // r
	add
	push argument 1  // y
	call Screen.drawLine 4
	pop temp 0
	push constant 0
	return
