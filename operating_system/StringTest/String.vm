function String.new 0
	push constant 3
	call Memory.alloc 1
	pop pointer 0  // this
	push argument 0  // maxLength
	pop this 0  // maxLen
	push constant 0
	pop this 1  // len
	push argument 0  // maxLength
	push constant 0
	gt
	not
	if-goto ELSE0
	push argument 0  // maxLength
	call Memory.alloc 1
	pop this 2  // arr
	goto ELSE_END0
label ELSE0
label ELSE_END0
	push pointer 0  // this
	return
function String.dispose 0
	push argument 0  // arg 0 is set to this by caller
	pop pointer 0  // this
	push this 0  // maxLen
	push constant 0
	gt
	not
	if-goto ELSE1
	push this 2  // arr
	call Memory.deAlloc 1
	pop temp 0
	goto ELSE_END1
label ELSE1
label ELSE_END1
	push pointer 0  // this
	call Memory.deAlloc 1
	pop temp 0
	push constant 0
	return
function String.length 0
	push argument 0  // arg 0 is set to this by caller
	pop pointer 0  // this
	push this 1  // len
	return
function String.charAt 0
	push argument 0  // arg 0 is set to this by caller
	pop pointer 0  // this
	push this 2  // arr
	push argument 1  // j
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	return
function String.setCharAt 0
	push argument 0  // arg 0 is set to this by caller
	pop pointer 0  // this
	push this 2  // arr
	push argument 1  // j
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push argument 2  // c
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push constant 0
	return
function String.appendChar 0
	push argument 0  // arg 0 is set to this by caller
	pop pointer 0  // this
	push this 2  // arr
	push this 1  // len
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push argument 1  // c
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push this 1  // len
	push constant 1
	add
	pop this 1  // len
	push pointer 0  // this
	return
function String.eraseLastChar 0
	push argument 0  // arg 0 is set to this by caller
	pop pointer 0  // this
	push this 1  // len
	push constant 1
	sub
	pop this 1  // len
	push this 2  // arr
	push this 1  // len
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push constant 0
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push constant 0
	return
function String.intValue 4
	push argument 0  // arg 0 is set to this by caller
	pop pointer 0  // this
	push constant 0  // false
	pop local 3  // neg
	push constant 0
	pop local 0  // i
	push constant 0
	pop local 1  // val
	push pointer 0  // this
	push constant 0
	call String.charAt 2
	push constant 45
	eq
	not
	if-goto ELSE2
	push constant 0  // true
	not  // true
	pop local 3  // neg
	push local 0  // i
	push constant 1
	add
	pop local 0  // i
	goto ELSE_END2
label ELSE2
label ELSE_END2
label LOOP3
	push local 0  // i
	push this 1  // len
	lt
	not
	if-goto ENDLOOP3
	push pointer 0  // this
	push local 0  // i
	call String.charAt 2
	pop local 2  // c
	push constant 0  // true
	not  // true
	not
	if-goto ELSE4
	push local 1  // val
	push constant 10
	call Math.multiply 2
	push local 2  // c
	push constant 48
	sub
	add
	pop local 1  // val
	push local 0  // i
	push constant 1
	add
	pop local 0  // i
	goto ELSE_END4
label ELSE4
label ELSE_END4
	goto LOOP3
label ENDLOOP3
	push local 3  // neg
	not
	if-goto ELSE5
	push local 1  // val
	neg
	return
	goto ELSE_END5
label ELSE5
label ELSE_END5
	push local 1  // val
	return
function String.setInt 5
	push argument 0  // arg 0 is set to this by caller
	pop pointer 0  // this
	push constant 0
	pop local 3  // j
	push constant 0  // false
	pop local 4  // neg
	push argument 1  // val
	push constant 0
	lt
	not
	if-goto ELSE6
	push constant 0  // true
	not  // true
	pop local 4  // neg
	push argument 1  // val
	neg
	pop argument 1  // val
	push pointer 0  // this
	push constant 0
	push constant 45
	call String.setCharAt 3
	pop temp 0
	push local 3  // j
	push constant 1
	add
	pop local 3  // j
	goto ELSE_END6
label ELSE6
label ELSE_END6
	push constant 5
	pop local 2  // i
label LOOP7
	push argument 1  // val
	push constant 0
	gt
	not
	if-goto ENDLOOP7
	push argument 1  // val
	push constant 10
	call Math.divide 2
	pop local 1  // next_i
	push argument 1  // val
	push constant 10
	push local 1  // next_i
	call Math.multiply 2
	sub
	pop local 0  // curr
	push pointer 0  // this
	push local 2  // i
	push constant 48
	push local 0  // curr
	add
	call String.setCharAt 3
	pop temp 0
	push local 1  // next_i
	pop argument 1  // val
	push local 2  // i
	push constant 1
	sub
	pop local 2  // i
	goto LOOP7
label ENDLOOP7
	push local 2  // i
	push constant 0
	eq
	push local 4  // neg
	and
	not
	if-goto ELSE8
	push constant 6
	pop this 1  // len
	push constant 0
	return
	goto ELSE_END8
label ELSE8
label ELSE_END8
label LOOP9
	push local 2  // i
	push constant 5
	lt
	not
	if-goto ENDLOOP9
	push local 2  // i
	push constant 1
	add
	pop local 2  // i
	push this 2  // arr
	push local 3  // j
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push this 2  // arr
	push local 2  // i
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push local 3  // j
	push constant 1
	add
	pop local 3  // j
	goto LOOP9
label ENDLOOP9
	push local 3  // j
	pop this 1  // len
	push constant 0
	return
function String.newLine 0
	push constant 128
	return
function String.backSpace 0
	push constant 129
	return
function String.doubleQuote 0
	push constant 34
	return
