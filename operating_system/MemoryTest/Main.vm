function Main.main 5
	push constant 8000
	push constant 333
	call Memory.poke 2
	pop temp 0
	push constant 8000
	call Memory.peek 1
	pop local 0  // temp
	push constant 8001
	push local 0  // temp
	push constant 1
	add
	call Memory.poke 2
	pop temp 0
	push constant 3
	call Array.new 1
	pop local 2  // a
	push local 2  // a
	push constant 2
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push constant 222
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push constant 8002
	push local 2  // a
	push constant 2
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	call Memory.poke 2
	pop temp 0
	push constant 0
	pop local 1  // err
	push constant 3
	call Array.new 1
	pop local 3  // b
	push local 3  // b
	push constant 1
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push local 2  // a
	push constant 2
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	push constant 100
	sub
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push local 3  // b
	push local 2  // a
	eq
	not
	if-goto ELSE0
	push constant 1
	pop local 1  // err
	goto ELSE_END0
label ELSE0
label ELSE_END0
	push constant 8003
	push local 3  // b
	push constant 1
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	push local 1  // err
	add
	call Memory.poke 2
	pop temp 0
	push constant 0
	pop local 1  // err
	push constant 500
	call Array.new 1
	pop local 4  // c
	push local 4  // c
	push constant 499
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push local 2  // a
	push constant 2
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	push local 3  // b
	push constant 1
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	sub
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push local 4  // c
	push local 2  // a
	eq
	not
	if-goto ELSE1
	push constant 1
	pop local 1  // err
	goto ELSE_END1
label ELSE1
label ELSE_END1
	push local 4  // c
	push local 3  // b
	eq
	not
	if-goto ELSE2
	push local 1  // err
	push constant 10
	add
	pop local 1  // err
	goto ELSE_END2
label ELSE2
label ELSE_END2
	push constant 8004
	push local 4  // c
	push constant 499
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	push local 1  // err
	add
	call Memory.poke 2
	pop temp 0
	push local 2  // a
	call Array.dispose 1
	pop temp 0
	push local 3  // b
	call Array.dispose 1
	pop temp 0
	push constant 0
	pop local 1  // err
	push constant 3
	call Array.new 1
	pop local 3  // b
	push local 3  // b
	push constant 0
	add  // letArrayEnd
	pop temp 0  // arr = arr + i
	push local 4  // c
	push constant 499
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	push constant 90
	sub
	push temp 0
	pop pointer 1  // that = &arr + i
	pop that 0  // *(arr+i) = exp_value
	push local 3  // b
	push local 4  // c
	eq
	not
	if-goto ELSE3
	push constant 1
	pop local 1  // err
	goto ELSE_END3
label ELSE3
label ELSE_END3
	push constant 8005
	push local 3  // b
	push constant 0
	add  // termArrEnd
	pop pointer 1  // that = &arr + arrIdx
	push that 0  // push arr[arrIdx] on stack
	push local 1  // err
	add
	call Memory.poke 2
	pop temp 0
	push local 4  // c
	call Array.dispose 1
	pop temp 0
	push local 3  // b
	call Array.dispose 1
	pop temp 0
	push constant 0
	return
