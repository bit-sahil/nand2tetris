// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array MEM, freeList;

    /** Initializes the class. */
    function void init() {
        let MEM = 0;
        let freeList = 2048;
        let freeList[0] = null;  // explicitly point to null
        let freeList[1] = 14334; // initial size = heap size - 2
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return MEM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let MEM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function Array alloc(int size) {
        var Array prevNode, currNode, ramBlock;

        if(size<1) {
            // Allocated memory size must be positive
            return Sys.error(5);
        }

        let prevNode = null;
        let currNode = freeList;

        while(~(currNode=null)) {
            // available space >= size+2
            if(currNode[1] > (size + 1)) {
                // set values for new currNode
                let currNode[size+2] = currNode[0];             // next pointer
                let currNode[size+3] = currNode[1] - (size+2);  // size
                
                if( prevNode=null ) {
                    // freeList got updated
                    let freeList = currNode + (size+2);
                } else {
                    let prevNode[0] = currNode + (size+2);
                }

                // take out a chunk of size+2 from currNode for user
                let ramBlock = currNode+2;
                let ramBlock[-1] = size;
                let ramBlock[-2] = null;  // explicitly point to null
                return ramBlock;
            }

            // available space might just be size or size+1
            // todo: in case of size+1, there'd be a memory leak of a byte which should probably be handled
            // as sizefree linked-list
            if(currNode[1] > (size - 1)) {
                if( prevNode=null ) {
                    // freeList points to yet next node (pointed by currNode)
                    let freeList = currNode[0];
                } else {
                    let prevNode[0] = currNode[0];
                }

                // take out a chunk of size+2 from currNode for user
                let ramBlock = currNode+2;
                let ramBlock[-1] = size;
                let ramBlock[-2] = null;  // explicitly point to null
                return ramBlock;
            }

            // we're here means available ram not found
            // update for next iteration in loop
            let prevNode = currNode;
            let currNode = currNode[0];
        }
        
        // being here means space not found
        // raise error without crashing system
        return Sys.error(6);  // Heap overflow
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        return Memory.dealloc_sorted(o);
    }

    function void dealloc_simple(Array o) {
        // o[-1] already contains size
        let o[-2] = freeList;
        let freeList = o - 2;
        return;
    }

    function void dealloc_sorted(Array o) {
        // we keep freeList in sorted order for easier defragmentation
        // also defragment this list at the same time
        
        var Array currNode, nextNode;
        var boolean loopCondition;

        if(freeList = null) {
            let o[-2] = null;
            let freeList = o - 2;
            return;
        }

        do Memory.poke(17010, o);  //debug
        do Memory.poke(17011, freeList);  //debug
        do Memory.poke(17016, o[-1]);  //debug

        let currNode = null;
        let nextNode = freeList;
        let loopCondition = ~(nextNode=null);

        while(loopCondition) {    
            if(nextNode < o) {
                let currNode = nextNode;
                let nextNode = currNode[0];
                let loopCondition = ~(nextNode=null);
            } else {
                let loopCondition = false;
            }
        }

        // this is where o is to be fit
        do Memory.poke(17012, 0);  //debug
        do Memory.poke(17013, 0);  //debug
        do Memory.poke(17014, 0);  //debug
        do Memory.poke(17015, 0);  //debug
        do Memory.poke(17017, 0);  //debug

        if( ~(nextNode=null) ) {
            // check if nextNode fits in at end of o
            if( (o + o[-1]) = nextNode) {
                do Memory.poke(17015, currNode);  //debug
                do Memory.poke(17012, nextNode);  //debug
                // next segment is just after o
                // update size and replace next of currNode
                
                let o[-2] = nextNode[0];
                let o[-1] = o[-1] + nextNode[1] + 2;

                if( currNode=null ) {
                    // o fits at beginning of freeList
                    let freeList = o - 2;
                } else {
                    // update next of currNode
                    let currNode[0] = o - 2;

                    do Memory.poke(17017, currNode);  //debug
                    // also check if o fits in at end of current node
                    if( (currNode + currNode[1] + 2) = (o-2)) {
                        // o matches segment just after currNode
                        let currNode[0] = o[-2];
                        let currNode[1] = currNode[1] + o[-1] + 2;
                    }
                }
                
                return;
            }
        }
    
        do Memory.poke(17013, currNode);  //debug
        do Memory.poke(17014, currNode[1]);  //debug

        // check if o fits in at end of current node
        if( (currNode + currNode[1] + 2) = o) {
            // o matches segment just after currNode
            let currNode[1] = currNode[1] + o[-1] + 2;

            // no other changes in freeList
            return;
        }

        // o is neither end of currNode nor just before nextNode
        // put o between currNode and nextNode

        // o[-1] already contains size
        let o[-2] = nextNode;

        if( currNode=null ) {
            // o fits at beginning of freeList
            let freeList = o - 2;
        } else {
            // update next of currNode
            let currNode[0] = o - 2;
        }

        return;
    }

}
