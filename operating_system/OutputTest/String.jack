// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int maxLen, len;
    field Array arr;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength<0) {
            // Maximum length must be non-negative
            return Sys.error(14);
        }

        let maxLen = maxLength;
        let len = 0; // empty at beginning

        if(maxLength > 0) {
            let arr = Memory.alloc(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if(maxLen > 0) {
            do Memory.deAlloc(arr);
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if((1+j)>len) {
            // String index out of bounds
            return Sys.error(15);
        }

        return arr[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if((1+j)>maxLen) {
            // String index out of bounds
            return Sys.error(16);
        }

        let arr[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if((1+len)>maxLen) {
            // String is full
            return Sys.error(17);
        }

        let arr[len] = c;
        let len = len+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(len=0) {
            // String is empty
            return Sys.error(18);
        }

        let len = len-1;
        let arr[len] = 0;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val;
        var char c;
        var boolean neg;

        let neg = false;
        let i = 0;
        let val = 0;

        if(charAt(0) = 45) {
            // negative sign
            let neg = true;
            let i = i + 1;
        }

        while(i<len) {
            let c = charAt(i);

            //if((c>47) & (c<58)) {
            if(true) {
                // valid numeric character
                let val = (val*10) + (c-48);
                
                /* todo: integer overflow
                if(val < 0) {
                    // overflow!!
                }
                */

                let i = i+1;
            } 
            /*
            else {
                // non-numeric char, terminate the loop
                let i = 6;
            }
            */
        }

        if(neg) {
            return -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // we can only have integer values with 5 digits, so max 6 length string suffice
        // we can calculate each digit starting from ones place and append it to end of string, 
        // and in another pass move characters to beginning of string
        // but is user sure to pass in a string of length>=6 ?

        var int curr, next_i, i, j;
        var boolean neg;

        if(maxLen<6) {
            // Insufficient string capacity (possibly)
            return Sys.error(19);
        }

        let j = 0;

        let neg = false;
        if(val<0) {
            let neg = true;
            let val = -val;
            do setCharAt(0, 45);  // '-'
            let j = j+1;
        }

        let i = 5;
        while (val>0) {
            let next_i = val/10;
            let curr = val - (10*next_i);
            do setCharAt(i, 48+curr);
            let val = next_i;
            let i = i-1;
        }

        if((i=0) & neg) {
            // full string
            let len = 6;
            return;
        }

        while(i<5) {
            let i = i+1;
            let arr[j] = arr[i];
            let j = j+1;
        }
                
        let len = j;
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
